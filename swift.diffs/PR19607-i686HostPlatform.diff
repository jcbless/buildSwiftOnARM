From 965f6190f38d53e5004321baa5a051983845d66a Mon Sep 17 00:00:00 2001
From: Adam Thayer <user@biticus.net>
Date: Thu, 27 Sep 2018 16:32:39 -0700
Subject: [PATCH 1/7] [i686 Linux] Bootstrap the build
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Prior to this, the swift build didn’t understand what i686 is, or what to do about building it. This unblocks building, but will still run into build breaks.
---
 CMakeLists.txt                                           | 4 +++-
 utils/build-script-impl                                  | 3 +++
 utils/swift_build_support/swift_build_support/targets.py | 3 +++
 3 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b081c780747..8634ef43b00 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -592,7 +592,7 @@ else()
     set(SWIFT_HOST_VARIANT_ARCH_default "x86_64")
   elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "IA64")
     set(SWIFT_HOST_VARIANT_ARCH_default "itanium")
-  elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86")
+  elseif("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "(x86|i686)")
     set(SWIFT_HOST_VARIANT_ARCH_default "i686")
   else()
     message(FATAL_ERROR "Unrecognized architecture on host system: ${CMAKE_SYSTEM_PROCESSOR}")
@@ -647,6 +647,8 @@ if("${SWIFT_HOST_VARIANT_SDK}" STREQUAL "LINUX")
   if("${SWIFT_HOST_TRIPLE}" STREQUAL "")
     if("${SWIFT_HOST_VARIANT_ARCH}" STREQUAL "x86_64")
       set(SWIFT_HOST_TRIPLE "x86_64-unknown-linux-gnu")
+    elseif("${SWIFT_HOST_VARIANT_ARCH}" STREQUAL "i686")
+      set(SWIFT_HOST_TRIPLE "i686-unknown-linux-gnu")
     elseif("${SWIFT_HOST_VARIANT_ARCH}" STREQUAL "aarch64")
       set(SWIFT_HOST_TRIPLE "aarch64-unknown-linux-gnu")
     elseif("${SWIFT_HOST_VARIANT_ARCH}" MATCHES "(powerpc64|powerpc64le)")
diff --git a/utils/build-script-impl b/utils/build-script-impl
index b5f2222c67d..677073bfc9a 100755
--- a/utils/build-script-impl
+++ b/utils/build-script-impl
@@ -433,6 +433,9 @@ function set_build_options_for_host() {
                 linux-x86_64)
                     SWIFT_HOST_VARIANT_ARCH="x86_64"
                     ;;
+                linux-i686)
+                    SWIFT_HOST_VARIANT_ARCH="i686"
+                    ;;
                 linux-armv6)
                     SWIFT_HOST_VARIANT_ARCH="armv6"
                     SWIFT_HOST_TRIPLE="armv6-unknown-linux-gnueabihf"
diff --git a/utils/swift_build_support/swift_build_support/targets.py b/utils/swift_build_support/swift_build_support/targets.py
index f4b5bb0d489..2859677facc 100644
--- a/utils/swift_build_support/swift_build_support/targets.py
+++ b/utils/swift_build_support/swift_build_support/targets.py
@@ -113,6 +113,7 @@ class StdlibDeploymentTarget(object):
 
     Linux = Platform("linux", archs=[
         "x86_64",
+        "i686",
         "armv6",
         "armv7",
         "aarch64",
@@ -160,6 +161,8 @@ def host_target():
         if system == 'Linux':
             if machine == 'x86_64':
                 return StdlibDeploymentTarget.Linux.x86_64
+            elif machine == 'i686':
+                return StdlibDeploymentTarget.Linux.i686
             elif machine.startswith('armv7'):
                 # linux-armv7* is canonicalized to 'linux-armv7'
                 return StdlibDeploymentTarget.Linux.armv7

From cafa8227384bb7b3e63155f8d1e535f071acb79d Mon Sep 17 00:00:00 2001
From: Adam Thayer <user@biticus.net>
Date: Thu, 27 Sep 2018 16:34:39 -0700
Subject: [PATCH 2/7] =?UTF-8?q?[i686=20Linux]=20Fix=20undefined=20?=
 =?UTF-8?q?=E2=80=98=5F=5Fswift=5Fssize=5Ft=E2=80=99?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 stdlib/public/SwiftShims/LibcShims.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/stdlib/public/SwiftShims/LibcShims.h b/stdlib/public/SwiftShims/LibcShims.h
index 17ef219bd6e..59d87b2d448 100644
--- a/stdlib/public/SwiftShims/LibcShims.h
+++ b/stdlib/public/SwiftShims/LibcShims.h
@@ -33,7 +33,7 @@ namespace swift { extern "C" {
 
 // This declaration is not universally correct.  We verify its correctness for
 // the current platform in the runtime code.
-#if defined(__linux__) && defined (__arm__)
+#if defined(__linux__) && (defined(__arm__) || defined(__i386__))
 typedef           int __swift_ssize_t;
 #elif defined(_WIN32)
 #if defined(_M_ARM) || defined(_M_IX86)

From 63b61ddd8392e131bb3a648e41cdeb920ffee339 Mon Sep 17 00:00:00 2001
From: Adam Thayer <user@biticus.net>
Date: Thu, 27 Sep 2018 16:41:25 -0700
Subject: [PATCH 3/7] [32-bit Linux] Align _GenericContext to 8 bytes

A static assert fires around GenericContext not quite being the correct size for 32-bit. Aligning _GenericContext addresses this problem.

swift/include/swift/AST/Decl.h:
 1541  static_assert(sizeof(_GenericContext) + sizeof(DeclContext) ==
 1542:               sizeof(GenericContext), "Please add fields to _GenericContext");
---
 include/swift/AST/Decl.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/include/swift/AST/Decl.h b/include/swift/AST/Decl.h
index 28562bf1457..5358c7e05b5 100644
--- a/include/swift/AST/Decl.h
+++ b/include/swift/AST/Decl.h
@@ -1462,7 +1462,7 @@ class alignas(RequirementRepr) TrailingWhereClause final :
 };
 
 // A private class for forcing exact field layout.
-class _GenericContext {
+class alignas(8) _GenericContext {
 // Not really public. See GenericContext.
 public:
   GenericParamList *GenericParams = nullptr;

From 073905b573a9779e3bf188dd24e3896ab885c3e5 Mon Sep 17 00:00:00 2001
From: Adam Thayer <user@biticus.net>
Date: Thu, 27 Sep 2018 16:44:17 -0700
Subject: [PATCH 4/7] [32-bit Linux] Handle size_t/uint64_t assumptions
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

There’s a few places where size_t is used for a field/parameter when constructing an array for types. Unfortunately, the Bitfields that were backing the inputs to these at some point after 4.1 grew past 32 bits and are now backed by a uint64_t. Even though the slice of the bitfield is small enough for 32-bit, clang sees these slices as 64-bit and complains if there isn’t a cast involved.
---
 include/swift/AST/Decl.h           |  2 +-
 include/swift/AST/Expr.h           | 12 ++++++------
 include/swift/AST/TypeRepr.h       |  2 +-
 include/swift/AST/Types.h          |  2 +-
 include/swift/SIL/SILInstruction.h |  4 ++--
 5 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/include/swift/AST/Decl.h b/include/swift/AST/Decl.h
index 5358c7e05b5..5cdf2e9825b 100644
--- a/include/swift/AST/Decl.h
+++ b/include/swift/AST/Decl.h
@@ -1599,7 +1599,7 @@ class ImportDecl final : public Decl,
 
   ArrayRef<AccessPathElement> getFullAccessPath() const {
     return {getTrailingObjects<AccessPathElement>(),
-            Bits.ImportDecl.NumPathElements};
+            static_cast<size_t>(Bits.ImportDecl.NumPathElements)};
   }
 
   ArrayRef<AccessPathElement> getModulePath() const {
diff --git a/include/swift/AST/Expr.h b/include/swift/AST/Expr.h
index d953afb1b43..b4ee7646dae 100644
--- a/include/swift/AST/Expr.h
+++ b/include/swift/AST/Expr.h
@@ -2114,10 +2114,10 @@ class CollectionExpr : public Expr {
   /// that trailing commas are currently allowed, and that invalid code may have
   /// stray or missing commas.
   MutableArrayRef<SourceLoc> getCommaLocs() {
-    return {getTrailingSourceLocs(), Bits.CollectionExpr.NumCommas};
+    return {getTrailingSourceLocs(), static_cast<size_t>(Bits.CollectionExpr.NumCommas)};
   }
   ArrayRef<SourceLoc> getCommaLocs() const {
-    return {getTrailingSourceLocs(), Bits.CollectionExpr.NumCommas};
+    return {getTrailingSourceLocs(), static_cast<size_t>(Bits.CollectionExpr.NumCommas)};
   }
   unsigned getNumCommas() const { return Bits.CollectionExpr.NumCommas; }
 
@@ -2911,7 +2911,7 @@ class TupleShuffleExpr final : public ImplicitConversionExpr,
 
   ArrayRef<int> getElementMapping() const {
     return {getTrailingObjects<int>(),
-            Bits.TupleShuffleExpr.NumElementMappings};
+            static_cast<size_t>(Bits.TupleShuffleExpr.NumElementMappings)};
   }
 
   /// What is the type impact of this shuffle?
@@ -2938,7 +2938,7 @@ class TupleShuffleExpr final : public ImplicitConversionExpr,
   /// Retrieve the argument indices for the variadic arguments.
   ArrayRef<unsigned> getVariadicArgs() const {
     return {getTrailingObjects<unsigned>(),
-            Bits.TupleShuffleExpr.NumVariadicArgs};
+            static_cast<size_t>(Bits.TupleShuffleExpr.NumVariadicArgs)};
   }
 
   /// Retrieve the owner of the default arguments.
@@ -2947,13 +2947,13 @@ class TupleShuffleExpr final : public ImplicitConversionExpr,
   /// Retrieve the caller-defaulted arguments.
   ArrayRef<Expr *> getCallerDefaultArgs() const {
     return {getTrailingObjects<Expr*>(),
-            Bits.TupleShuffleExpr.NumCallerDefaultArgs};
+            static_cast<size_t>(Bits.TupleShuffleExpr.NumCallerDefaultArgs)};
   }
 
   /// Retrieve the caller-defaulted arguments.
   MutableArrayRef<Expr *> getCallerDefaultArgs() {
     return {getTrailingObjects<Expr*>(),
-            Bits.TupleShuffleExpr.NumCallerDefaultArgs};
+            static_cast<size_t>(Bits.TupleShuffleExpr.NumCallerDefaultArgs)};
   }
 
   static bool classof(const Expr *E) {
diff --git a/include/swift/AST/TypeRepr.h b/include/swift/AST/TypeRepr.h
index 5f254c77585..318f35cff19 100644
--- a/include/swift/AST/TypeRepr.h
+++ b/include/swift/AST/TypeRepr.h
@@ -1079,7 +1079,7 @@ class SILBoxTypeRepr final : public TypeRepr,
   }
   ArrayRef<TypeRepr *> getGenericArguments() const {
     return {getTrailingObjects<TypeRepr*>(),
-            Bits.SILBoxTypeRepr.NumGenericArgs};
+            static_cast<size_t>(Bits.SILBoxTypeRepr.NumGenericArgs)};
   }
   
   GenericParamList *getGenericParams() const {
diff --git a/include/swift/AST/Types.h b/include/swift/AST/Types.h
index d14df7721b4..ceb5c21b918 100644
--- a/include/swift/AST/Types.h
+++ b/include/swift/AST/Types.h
@@ -4650,7 +4650,7 @@ class ArchetypeType final : public SubstitutableType,
   /// type shall conform.
   ArrayRef<ProtocolDecl *> getConformsTo() const {
     return { getTrailingObjects<ProtocolDecl *>(),
-             Bits.ArchetypeType.NumProtocols };
+             static_cast<size_t>(Bits.ArchetypeType.NumProtocols) };
   }
   
   /// requiresClass - True if the type can only be substituted with class types.
diff --git a/include/swift/SIL/SILInstruction.h b/include/swift/SIL/SILInstruction.h
index 7d148ec37e1..4bc66b3e931 100644
--- a/include/swift/SIL/SILInstruction.h
+++ b/include/swift/SIL/SILInstruction.h
@@ -1360,12 +1360,12 @@ class AllocStackInst final
 
   ArrayRef<Operand> getAllOperands() const {
     return { getTrailingObjects<Operand>(),
-             SILInstruction::Bits.AllocStackInst.NumOperands };
+             static_cast<size_t>(SILInstruction::Bits.AllocStackInst.NumOperands) };
   }
 
   MutableArrayRef<Operand> getAllOperands() {
     return { getTrailingObjects<Operand>(),
-             SILInstruction::Bits.AllocStackInst.NumOperands };
+             static_cast<size_t>(SILInstruction::Bits.AllocStackInst.NumOperands) };
   }
 
   ArrayRef<Operand> getTypeDependentOperands() const {

From 0a2cdd466f8a580a797c47d3fa1f110685ed28a1 Mon Sep 17 00:00:00 2001
From: Adam Thayer <user@biticus.net>
Date: Thu, 27 Sep 2018 17:46:15 -0700
Subject: [PATCH 5/7] [i686 Linux] Support Float80
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Darwin and Linux use different size and alignments for “long double” on 32-bit x86. Instead of hardcoding it, we should just ask LLVM about it.
---
 lib/IRGen/GenType.cpp | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/lib/IRGen/GenType.cpp b/lib/IRGen/GenType.cpp
index bc40a50caf3..77429b8f74e 100644
--- a/lib/IRGen/GenType.cpp
+++ b/lib/IRGen/GenType.cpp
@@ -1557,8 +1557,12 @@ convertPrimitiveBuiltin(IRGenModule &IGM, CanType canTy) {
       return RetTy{ llvm::Type::getFloatTy(ctx), Size(4), Alignment(4) };
     case BuiltinFloatType::IEEE64:
       return RetTy{ llvm::Type::getDoubleTy(ctx), Size(8), Alignment(8) };
-    case BuiltinFloatType::IEEE80:
-      return RetTy{ llvm::Type::getX86_FP80Ty(ctx), Size(16), Alignment(16) };
+    case BuiltinFloatType::IEEE80: {
+      llvm::Type *floatTy = llvm::Type::getX86_FP80Ty(ctx);
+      uint64_t ByteSize = IGM.DataLayout.getTypeAllocSize(floatTy);
+      unsigned align = IGM.DataLayout.getABITypeAlignment(floatTy);
+      return RetTy{ floatTy, Size(ByteSize), Alignment(align) };
+    }
     case BuiltinFloatType::IEEE128:
       return RetTy{ llvm::Type::getFP128Ty(ctx), Size(16), Alignment(16) };
     case BuiltinFloatType::PPC128:

From eddecbfcd43d72e33fa9788b484424ec2eaa5036 Mon Sep 17 00:00:00 2001
From: Adam Thayer <user@biticus.net>
Date: Thu, 27 Sep 2018 17:51:08 -0700
Subject: [PATCH 6/7] [i686 Linux] Add __mulodi4 Math Stub to i686

Win and Linux Arm32 have the same aversion to linking compiler-rt for this.
---
 stdlib/public/stubs/MathStubs.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/stdlib/public/stubs/MathStubs.cpp b/stdlib/public/stubs/MathStubs.cpp
index dbafab66cbf..8d0617089ca 100644
--- a/stdlib/public/stubs/MathStubs.cpp
+++ b/stdlib/public/stubs/MathStubs.cpp
@@ -112,7 +112,7 @@ __muloti4(ti_int a, ti_int b, int* overflow)
 // lowered to instructions as though MSVC had generated.  There does not seem to
 // be a MSVC provided multiply with overflow detection that I can see, but this
 // avoids an unnecessary dependency on compiler-rt for a single function.
-#if (defined(__linux__) && defined(__arm__)) || defined(_WIN32)
+#if (defined(__linux__) && (defined(__arm__) || defined(__i386__))) || defined(_WIN32)
 
 // Similar to above, but with mulodi4.  Perhaps this is
 // something that shouldn't be done, and is a bandaid over

